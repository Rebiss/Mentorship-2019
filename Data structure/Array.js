/**
 * @Array Տվյալներ պահպանելու կառուցվածք։
 * @Array Տարրերի հաջորդականություն է, սովորաբար տվյալների մեկ տեսակի: 
 *      Յուրաքանչյուր տարր կարող է մուտք գործել ինդեքսային համարով, որը ներկայացնում է իր դիրքը զանգվածում:
 *      Սովորաբար զանգվածի ինդեքսավորումը կազմում է զրոյական հիմքով եթե զանգվածը պարունակում է n տարրեր, 
 *      առաջին տարրը ունի ինդեքս 0, երկրորդը ՝ ինդեքս 1, իսկ վերջինն ունի ինդեքս n-1:
 * @Static_Array ստատիկ զանգված հայտարարվելուց և դրա հիշողությունը հատկացնելուց հետո չի կարող փոխվել չափի մեջ:
 * @Dynamic_Array դինամիկ զանգված անհրաժեշտության դեպքում կարող է երկարությունը մեծացնել կամ նվազել:
 * @Multidimensional_Array բազմաչափ զանգված որպես տարր պարունակում է ֆիքսված երկարության զանգվածներ: 
 *      Օրինակ, [[1, 2], [3, 4], [5, 6]] երկչափ զանգված է: Մատրիցան մաթեմատիկական օբյեկտ է, որը կարող է իրականացվել որպես բազմաչափ զանգված:
 * @Associative_Array ասոցիատիվ զանգված, նույնպես տվյալների կառուցվածք է, որը պարունակում է զույգեր բանալիների և արժեքների,
 *      Յուրաքանչյուր բանալի պետք է եզակի լինի (այն չպետք է մեկից ավելի անգամ հայտնվի կառուցվածքում): new Map()
 *      JSON- ը ըստ էության ասոցիատիվ զանգված է, որտեղ արժեքները կարող են նաև լինել ասոցիատիվ զանգված:
 * 
 * Ավելի հաճախ @Array ճիշտ է կիրառել երբ պետք չէ փոփոխել զանգվածը(ավելացնել կամ ջնջել էլեմենտնները), այլ միայն աշխատել արդեն գոյություն ունեցող,
 * իսկզբանե հայտարարված տարերի հետ։ Քանի որ յուրաքանչյուր փոփոխության ժամանակ ստեղծվում է նոր զանգված, նոր կարգավիճակով իսկ հինը ջնջվում է:
 * 
 * Ստանալ էլեմենտ՝ O(1)
 * Ավելացնել\Ջնջել էլեմենտ՝ O(n)
 * Որոնում՝ O(n)
 * 
 * @Method
 * @push O(1)
 * @shift @unshift O(n)
 * @sort O(n*logn)
 * @find @include @indexOf O(n)
 */

const array = new Array();
const array = [];

const arrNumber = [0, 1, 2, 3, 4, 5] // Միաչափ զանգված։
const arrNumber = [[0, 1], [2, 3]] // Երկչափ զանգված։